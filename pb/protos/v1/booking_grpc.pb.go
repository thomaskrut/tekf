// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protos/v1/booking.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookingEventService_WriteBookingEvent_FullMethodName = "/protos.v1.BookingEventService/WriteBookingEvent"
	BookingEventService_ReadBookingEvents_FullMethodName = "/protos.v1.BookingEventService/ReadBookingEvents"
)

// BookingEventServiceClient is the client API for BookingEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingEventServiceClient interface {
	WriteBookingEvent(ctx context.Context, in *WriteBookingEventRequest, opts ...grpc.CallOption) (*WriteBookingEventResponse, error)
	ReadBookingEvents(ctx context.Context, in *ReadBookingEventsRequest, opts ...grpc.CallOption) (BookingEventService_ReadBookingEventsClient, error)
}

type bookingEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingEventServiceClient(cc grpc.ClientConnInterface) BookingEventServiceClient {
	return &bookingEventServiceClient{cc}
}

func (c *bookingEventServiceClient) WriteBookingEvent(ctx context.Context, in *WriteBookingEventRequest, opts ...grpc.CallOption) (*WriteBookingEventResponse, error) {
	out := new(WriteBookingEventResponse)
	err := c.cc.Invoke(ctx, BookingEventService_WriteBookingEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingEventServiceClient) ReadBookingEvents(ctx context.Context, in *ReadBookingEventsRequest, opts ...grpc.CallOption) (BookingEventService_ReadBookingEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookingEventService_ServiceDesc.Streams[0], BookingEventService_ReadBookingEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bookingEventServiceReadBookingEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookingEventService_ReadBookingEventsClient interface {
	Recv() (*ReadBookingEventsResponse, error)
	grpc.ClientStream
}

type bookingEventServiceReadBookingEventsClient struct {
	grpc.ClientStream
}

func (x *bookingEventServiceReadBookingEventsClient) Recv() (*ReadBookingEventsResponse, error) {
	m := new(ReadBookingEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookingEventServiceServer is the server API for BookingEventService service.
// All implementations must embed UnimplementedBookingEventServiceServer
// for forward compatibility
type BookingEventServiceServer interface {
	WriteBookingEvent(context.Context, *WriteBookingEventRequest) (*WriteBookingEventResponse, error)
	ReadBookingEvents(*ReadBookingEventsRequest, BookingEventService_ReadBookingEventsServer) error
	mustEmbedUnimplementedBookingEventServiceServer()
}

// UnimplementedBookingEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingEventServiceServer struct {
}

func (UnimplementedBookingEventServiceServer) WriteBookingEvent(context.Context, *WriteBookingEventRequest) (*WriteBookingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBookingEvent not implemented")
}
func (UnimplementedBookingEventServiceServer) ReadBookingEvents(*ReadBookingEventsRequest, BookingEventService_ReadBookingEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadBookingEvents not implemented")
}
func (UnimplementedBookingEventServiceServer) mustEmbedUnimplementedBookingEventServiceServer() {}

// UnsafeBookingEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingEventServiceServer will
// result in compilation errors.
type UnsafeBookingEventServiceServer interface {
	mustEmbedUnimplementedBookingEventServiceServer()
}

func RegisterBookingEventServiceServer(s grpc.ServiceRegistrar, srv BookingEventServiceServer) {
	s.RegisterService(&BookingEventService_ServiceDesc, srv)
}

func _BookingEventService_WriteBookingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBookingEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingEventServiceServer).WriteBookingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingEventService_WriteBookingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingEventServiceServer).WriteBookingEvent(ctx, req.(*WriteBookingEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingEventService_ReadBookingEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadBookingEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookingEventServiceServer).ReadBookingEvents(m, &bookingEventServiceReadBookingEventsServer{stream})
}

type BookingEventService_ReadBookingEventsServer interface {
	Send(*ReadBookingEventsResponse) error
	grpc.ServerStream
}

type bookingEventServiceReadBookingEventsServer struct {
	grpc.ServerStream
}

func (x *bookingEventServiceReadBookingEventsServer) Send(m *ReadBookingEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BookingEventService_ServiceDesc is the grpc.ServiceDesc for BookingEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.v1.BookingEventService",
	HandlerType: (*BookingEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteBookingEvent",
			Handler:    _BookingEventService_WriteBookingEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadBookingEvents",
			Handler:       _BookingEventService_ReadBookingEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/v1/booking.proto",
}
